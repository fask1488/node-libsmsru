// Generated by CoffeeScript 1.6.3
'use strict';
var auth, authInfo, errorCodesSend, errorCodesStatus, http, querystring, send, status, translit;

http = require('http');

querystring = require('querystring');

errorCodesSend = {
  '1': 'Неизвестная ошибка',
  '100': 'Сообщение принято к отправке',
  '200': 'Неправильный api_id',
  '201': 'Не хватает средств на лицевом счету',
  '202': 'Неправильно указан получатель',
  '203': 'Нет текста сообщения',
  '204': 'Имя отправителя не согласовано с администрацией',
  '205': 'Сообщение слишком длинное (превышает 8 СМС)',
  '206': 'Будет превышен или уже превышен дневной лимит на отправку сообщений',
  '207': 'На этот номер (или один из номеров) нельзя отправлять сообщения, либо указано более 100 номеров в списке получателей',
  '208': 'Параметр time указан неправильно',
  '209': 'Вы добавили этот номер (или один из номеров) в стоп-лист',
  '210': 'Используется GET, где необходимо использовать POST',
  '211': 'Метод не найден',
  '212': 'Текст сообщения необходимо передать в кодировке UTF-8 (вы передали в другой кодировке)',
  '220': 'Сервис временно недоступен, попробуйте чуть позже.',
  '230': 'Сообщение не принято к отправке, так как на один номер в день нельзя отправлять более 250 сообщений',
  '300': 'Неправильный token (возможно истек срок действия, либо ваш IP изменился)',
  '301': 'Неправильный пароль, либо пользователь не найден',
  '302': 'Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)'
};

errorCodesStatus = {
  '1': 'Неизвестная ошибка',
  '-1': 'Сообщение не найдено',
  '100': 'Сообщение находится в нашей очереди',
  '101': 'Сообщение передается оператору',
  '102': 'Сообщение отправлено (в пути)',
  '103': 'Сообщение доставлено',
  '104': 'Не может быть доставлено: время жизни истекло',
  '105': 'Не может быть доставлено: удалено оператором',
  '106': 'Не может быть доставлено: сбой в телефоне',
  '107': 'Не может быть доставлено: неизвестная причина',
  '108': 'Не может быть доставлено: отклонено',
  '200': 'Неправильный api_id',
  '210': 'Используется GET, где необходимо использовать POST',
  '211': 'Метод не найден',
  '220': 'Сервис временно недоступен, попробуйте чуть позже.',
  '300': 'Неправильный token (возможно истек срок действия, либо ваш IP изменился)',
  '301': 'Неправильный пароль, либо пользователь не найден',
  '302': 'Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)'
};

authInfo = {
  api_id: null,
  login: null,
  pass: null
};

translit = function(str) {
  var re_notabc, replace_arr;
  replace_arr = [[/—/g, '-'], [/\|/g, ':'], [/€/g, 'E'], [/{/g, '('], [/}/g, ')'], [/\\/g, '/'], [/\[/g, '('], [/\]/g, ')'], [/~/g, '-'], [/\^/g, '-'], [/`/g, "'"], [/\t/g, ' ']];
  re_notabc = /[^абвгдеёжзийклмнопрстуфхцчшщъыьэюяa-z0-9@$\n_!"#%&'\(\)*+,\-\.\/:;<=>? ]/gi;
  replace_arr.forEach(function(re) {
    return str = str.replace(re[0], re[1]);
  });
  return str = str.replace(re_notabc, '');
};

auth = function(login, pass) {
  if (pass == null) {
    pass = null;
  }
  if (pass != null) {
    authInfo.login = login;
    return authInfo.pass = pass;
  } else {
    return authInfo.api_id = login;
  }
};

send = function(number, text, options, onSend) {
  var params, query;
  if (onSend == null) {
    onSend = null;
  }
  if (onSend == null) {
    onSend = options;
    options = {};
  }
  if (Array.isArray(number)) {
    number = number.join(',');
  }
  options.partner_id = 19743;
  if (authInfo.api_id != null) {
    options.api_id = authInfo.api_id;
  } else {
    options.login = authInfo.login;
    options.password = authInfo.pass;
  }
  options.to = number;
  options.text = text instanceof Buffer ? text.toString() : String(text);
  if ((options.translit != null) && options.translit === 1) {
    options.text = translit(options.text);
  }
  query = querystring.stringify(options);
  params = {
    hostname: 'sms.ru',
    path: "/sms/send",
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': query.length
    }
  };
  return http.request(params, function(res) {
    var answer;
    res.setEncoding('utf8');
    answer = {
      raw: ''
    };
    res.on('data', function(chunk) {
      return answer.raw += chunk;
    });
    res.on('end', function() {
      var err;
      answer.smsId = answer.raw.split('\n');
      answer.status = answer.smsId.shift();
      if (answer.status === '100') {
        answer.balance = answer.smsId.pop().replace('balance=', '');
        return onSend(null, answer);
      } else {
        answer.smsId = [];
        err = {
          httpStatus: res.statusCode,
          code: answer.status || '1',
          message: errorCodesSend[answer.status || '1']
        };
        return onSend(err, answer);
      }
    });
    return res.on('error', function(err) {
      return onSend(err, null);
    });
  }).end(query);
};

status = function(id, onStatus) {
  var options, params, query;
  if (authInfo.api_id != null) {
    options = {
      api_id: authInfo.api_id
    };
  } else {
    options = {
      login: authInfo.login,
      password: authInfo.pass
    };
  }
  options.id = id;
  query = querystring.stringify(options);
  params = {
    hostname: 'sms.ru',
    path: "/sms/status",
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': query.length
    }
  };
  return http.request(params, function(res) {
    var answer;
    res.setEncoding('utf8');
    answer = {
      raw: ''
    };
    res.on('data', function(chunk) {
      return answer.raw += chunk;
    });
    res.on('end', function() {
      var err, _ref;
      answer.status = answer.raw.trim();
      answer.message = errorCodesStatus[answer.status || '1'];
      if (('100' < (_ref = answer.status) && _ref < '108')) {
        return onStatus(null, answer);
      } else {
        err = {
          httpStatus: res.statusCode,
          code: answer.status || '1',
          message: errorCodesStatus[answer.status || '1']
        };
        return onStatus(err, answer);
      }
    });
    return res.on('error', function(err) {
      return onStatus(err, null);
    });
  }).end(query);
};

exports.auth = auth;

exports.send = send;

exports.status = status;
