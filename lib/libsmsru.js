/**
 * Simple sms.ru API library. All you basicly need is here - sending SMS and
 * checking delivering status of sent messages.
 *
 * Usage is as simple as it can be.
 * Require library (in this example it located in ./lib/, but you can install it
 * to your node_modules directory):
 *
 *     sms = require './lib/libsmsru'
 *
 * You need to authorise with your API ID:
 *
 *     sms.auth '00000000-0000-0000-0000-000000000000'
 *
 * or with your login and password:
 *
 *     sms.auth 'login', 'pa$$w0rd'
 *
 * Then just send SMS with text 'Пример SMS-сообщения' to number 79150000000 from
 * sender xinit.ru:
 *
 *     sms.send '79150000000', 'Пример SMS-сообщения', { from: 'xinit.ru'}, onSend
 *
 * Note that in options object { from: 'xinit.ru'} you can use all parameters
 * from sms.ru you want. Or you can just skip it and send SMS this way:
 *
 *     sms.send '79150000000', 'Пример SMS-сообщения', onSend
 *
 * This time SMS will be sent from default sender.
 *
 * onSend is Callback function with two parameters: (err, answer). If err is null
 * then you are lucky - your SMS has been successfully sent. If err is not null
 * then SMS will not be delivered because of error occured while sending. You
 * can view err.code (number error code) and err.message (human readable russian
 * message). If err is null then answer is object like this:
 *
 * {
 *     raw    : '100\n200007-300007\nbalance=199.03',
 *     smsId  : [ '200007-300007' ],
 *     status : '100',
 *     balance: '199.03'
 * }
 *
 * `raw` is just raw answer from sms.ru server. You probably don't need it until
 * you perfectly know what you are doing (you do not need it even then).
 * `smsId` is array of SMS identifiers. You need it if you want to check sent SMS
 * status.
 * `status` is message sending status code. Nomally it should be always '100'.
 * `balance` is you account balance in russian RUB.
 *
 * When you successfully sent SMS, you probably want to know whether it came to
 * receipient or not. You can do it simply calling one function:
 *
 *     sms.status '200007-300007', onStatus
 *
 * '200007-300007' is SMS identifier from onSend()'s answer.smsId array. Note
 * that sms.status() can work only with one ID string, not with arrays.
 *
 * onStatus is callback function (err, answer). If SMS can't be delivered at all
 * (for any reason) then err will contain two fields: `code` (number code of
 * error) and `message` (human readable error description in russian). If SMS
 * delivered or in progress then err is null and answer is key-value object with
 * the following parameters:
 *
 * {
 *     raw    : '102',
 *     status : '102',
 *     message: 'Сообщение отправлено (в пути)'
 * }
 *
 * `raw` is raw answer from sms.ru which you don't need until debugging purposes.
 * `status` is code which shows SMS delivering status. Normally you need statuses
 * '102' (means that SMS delivering is in progress) and '103' (means that SMS
 * successfully delivered).
 * `message` is human readable message in russian.
 *
 * That's all! You can also try well commented example `usecase.coffee`
 * (`usecase.js` if you want raw JavaScript).
 *
 *
 * If you want this library always stay actual you can:
 * - donate via PayPal (more info: http://xinit.ru/)
 * - use sms.ru from this access point: http://xinit.sms.ru/ (it makes no
 *   differences for you but allow me to get a little money)
 * - send SMS messages with this library (here is my agent code which makes no
 *   differences for you but allow me to get a little money)
 * - comment, share, spread this library
 * - send issues, pull requests
 *
 *
 * @license Feel free to use or modify this lib as long as my @author tag remains
 * @version 0.0.1
 * @author Alexander Zubakov <developer@xinit.ru>
 *
 */

// Generated by CoffeeScript 1.6.3
'use strict';
var auth, authInfo, errorCodesSend, errorCodesStatus, http, querystring, send, status;

http = require('http');

querystring = require('querystring');

errorCodesSend = {
  '1': 'Неизвестная ошибка',
  '100': 'Сообщение принято к отправке',
  '200': 'Неправильный api_id',
  '201': 'Не хватает средств на лицевом счету',
  '202': 'Неправильно указан получатель',
  '203': 'Нет текста сообщения',
  '204': 'Имя отправителя не согласовано с администрацией',
  '205': 'Сообщение слишком длинное (превышает 8 СМС)',
  '206': 'Будет превышен или уже превышен дневной лимит на отправку сообщений',
  '207': 'На этот номер (или один из номеров) нельзя отправлять сообщения, либо указано более 100 номеров в списке получателей',
  '208': 'Параметр time указан неправильно',
  '209': 'Вы добавили этот номер (или один из номеров) в стоп-лист',
  '210': 'Используется GET, где необходимо использовать POST',
  '211': 'Метод не найден',
  '212': 'Текст сообщения необходимо передать в кодировке UTF-8 (вы передали в другой кодировке)',
  '220': 'Сервис временно недоступен, попробуйте чуть позже.',
  '230': 'Сообщение не принято к отправке, так как на один номер в день нельзя отправлять более 250 сообщений',
  '300': 'Неправильный token (возможно истек срок действия, либо ваш IP изменился)',
  '301': 'Неправильный пароль, либо пользователь не найден',
  '302': 'Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)'
};

errorCodesStatus = {
  '1': 'Неизвестная ошибка',
  '-1': 'Сообщение не найдено',
  '100': 'Сообщение находится в нашей очереди',
  '101': 'Сообщение передается оператору',
  '102': 'Сообщение отправлено (в пути)',
  '103': 'Сообщение доставлено',
  '104': 'Не может быть доставлено: время жизни истекло',
  '105': 'Не может быть доставлено: удалено оператором',
  '106': 'Не может быть доставлено: сбой в телефоне',
  '107': 'Не может быть доставлено: неизвестная причина',
  '108': 'Не может быть доставлено: отклонено',
  '200': 'Неправильный api_id',
  '210': 'Используется GET, где необходимо использовать POST',
  '211': 'Метод не найден',
  '220': 'Сервис временно недоступен, попробуйте чуть позже.',
  '300': 'Неправильный token (возможно истек срок действия, либо ваш IP изменился)',
  '301': 'Неправильный пароль, либо пользователь не найден',
  '302': 'Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)'
};

authInfo = {
  api_id: null,
  login: null,
  pass: null
};

auth = function(login, pass) {
  if (pass == null) {
    pass = null;
  }
  if (pass != null) {
    authInfo.login = login;
    return authInfo.pass = pass;
  } else {
    return authInfo.api_id = login;
  }
};

send = function(number, text, options, onSend) {
  var params, query;
  if (onSend == null) {
    onSend = null;
  }
  if (onSend == null) {
    onSend = options;
    options = {};
  }
  if (Array.isArray(number)) {
    number = number.join(',');
  }
  options.partner_id = 19743;
  if (authInfo.api_id != null) {
    options.api_id = authInfo.api_id;
  } else {
    options.login = authInfo.login;
    options.password = authInfo.pass;
  }
  options.to = number;
  options.text = text;
  query = querystring.stringify(options);
  params = {
    hostname: 'sms.ru',
    path: "/sms/send",
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': query.length
    }
  };
  return http.request(params, function(res) {
    var answer;
    res.setEncoding('utf8');
    answer = {
      raw: ''
    };
    res.on('data', function(chunk) {
      return answer.raw += chunk;
    });
    res.on('end', function() {
      var err;
      answer.smsId = answer.raw.split('\n');
      answer.status = answer.smsId.shift();
      if (answer.status === '100') {
        answer.balance = answer.smsId.pop().replace('balance=', '');
        return onSend(null, answer);
      } else {
        answer.smsId = [];
        err = {
          httpStatus: res.statusCode,
          code: answer.status || '1',
          message: errorCodesSend[answer.status || '1']
        };
        return onSend(err, answer);
      }
    });
    return res.on('error', function(err) {
      return onSend(err, null);
    });
  }).end(query);
};

status = function(id, onStatus) {
  var options, params, query;
  if (authInfo.api_id != null) {
    options = {
      api_id: authInfo.api_id
    };
  } else {
    options = {
      login: authInfo.login,
      password: authInfo.pass
    };
  }
  options.id = id;
  query = querystring.stringify(options);
  params = {
    hostname: 'sms.ru',
    path: "/sms/status",
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': query.length
    }
  };
  return http.request(params, function(res) {
    var answer;
    res.setEncoding('utf8');
    answer = {
      raw: ''
    };
    res.on('data', function(chunk) {
      return answer.raw += chunk;
    });
    res.on('end', function() {
      var err, _ref;
      answer.status = answer.raw.trim();
      answer.message = errorCodesStatus[answer.status || '1'];
      if (('100' < (_ref = answer.status) && _ref < '108')) {
        return onStatus(null, answer);
      } else {
        err = {
          httpStatus: res.statusCode,
          code: answer.status || '1',
          message: errorCodesStatus[answer.status || '1']
        };
        return onStatus(err, answer);
      }
    });
    return res.on('error', function(err) {
      return onStatus(err, null);
    });
  }).end(query);
};

exports.auth = auth;

exports.send = send;

exports.status = status;
